#!/bin/bash

# *************************************************************************************************
# mediam (Media Maid)
# https://github.com/agileforge/mediam
# *************************************************************************************************
# License: GPL 3
# Author: Pascal Fluck (PFComputing)
# *************************************************************************************************

# Initialization
TOLERANCE=0.5
PRUNE_HISTORY_FILENAME=".prune"

# prune usage
display_prune_usage() { 
	echo -e "Prune multimedia images. The goal is to remove redundent images due to intensive shooting.\n" 
	echo -e "MediaM will try to recognise similar images in order of time. Then it will gather similar images" 
	echo -e "in prune folders.\n" 
	echo -e "Then remove you have to remove in each folders the images you don't want.\n" 
	echo -e "Finally commit it.\n" 
	echo -e "Usage:" 
	echo -e "$0 prune -R -c -t <TOLERANCE> -v -d -h [source] [prune-target]\n" 
	echo -e "Arguments:" 
	echo -e "-R  --recursive                   Execute action(s) recursively."
	echo -e "-t  --tolerance=TOLERANCE         Image comparison tolerance."
	echo -e "-c  --commit                      Commits the prunned folders by deleting removed images."
	echo -e "    --keep					       While committing, do not clean (delete) prune target directory."
	echo -e "-v  --verbose                     Display details while executing actions."
	echo -e "-d  --debug                       Display more details while executing actions."
	echo -e "-h  --help                        Display this help and exit."
	echo -e "\n" 
	echo -e "TOLERANCE" 
	echo -e "Value that specify the tolerance of image difference."
	echo -e "If 1 the image must be exactly the same, if 0 all images accepted."
	echo -e "Default is $PRUNE_TOLERANCE."
	echo -e "\n" 
} 

# Initialization
MAXDEPTH=1

# Parse parameters
OPTS=$( getopt -o ct:vdRh -l commit,tolerance:,keep,verbose,debug,recursive,help -- $BASE_OPTS )
if [ $? != 0 ] ; then 
	echo "Failed parsing options." >&2 
	exit 1 
fi

if [[ "$OPTS" == " -- 'prune'" ]]; then
	display_prune_usage
	exit 1
fi

eval set -- "$OPTS"

while true; do
	case "$1" in
	    -c | --commit )
			shift
	        COMMIT=true
	        ;;
	    -t | --tolerance )
			shift
	        TOLERANCE="$1"
			shift
	        ;;
        -R | --recursive )           
			shift
			RECURSIVE=true
			MAXDEPTH=999
            ;;
        --keep )
			shift
	        KEEP=true
	        ;;
		-h | --help )
			display_prune_usage
			break
			;;
		-- ) 
			shift
			break 
			;;
		* )
			shift
			;;
	esac
done

debug "COMMIT = $COMMIT"
debug "TOLERANCE = $TOLERANCE"
debug "MAXDEPTH = $MAXDEPTH"

# Args check
if [[ "$SOURCE" == "" ]]; then SOURCE="$(pwd)"; fi
if [[ "$TARGET" == "" ]]; then TARGET="$SOURCE"; fi

debug "SOURCE = $SOURCE"
debug "TARGET = $TARGET"

if [[ ! -f "$SOURCE" ]]; then
	if [[ ! -d "$SOURCE" ]]; then
		echo "Source file or directory doesn't exists: $SOURCE"
		exit 2
	fi
fi

# Execute prune command
if [[ ! $COMMIT ]]; then
	pruneCount=1
	similarCount=0
	verbose "Start to find similar images in $SOURCE."

	find "$SOURCE" -maxdepth $MAXDEPTH -type f -print0 | sort -z | while IFS= read -r -d '' f; do
		if [[ -f $f ]]; then
			debug "$f"
			filenameWithExt=$(basename "$f")

			typeof "$f"
			mediaType=$__result__
			if [[ "$mediaType" == "image" ]]; then
				if [[ -f $previousImage ]]; then
					previousFilenameWithExt=$(basename "$previousImage")
					debug "$f"
					difference=$(compare -quiet -metric NCC "$previousImage" "$f" null: 2>&1)

					re="^[0-9]\.{0,1}[0-9]*$"
					if [[ $difference =~ $re ]]; then
						debug "$difference >= $TOLERANCE"
						isDifferent=$(echo "$difference >= $TOLERANCE" | bc -l)

						if [[ $isDifferent == 1 ]]; then
							verbose "'$previousImage' seems similar to '$f' ($difference)."
							stillSimilar=1
							pruneDir="$TARGET/$pruneCount"
							debug "pruneDir = $pruneDir"
							
							mkdir -p "$pruneDir"
							if [[ ! -f "$pruneDir/$previousFilenameWithExt" ]]; then
								if [[ $similarCount == 0 ]]; then 
									ln -s "$previousImage" "$pruneDir/$previousFilenameWithExt"; 
									echo "$previousImage" >> "$pruneDir/$PRUNE_HISTORY_FILENAME"
								fi
							fi
							ln -s "$f" "$pruneDir/$filenameWithExt"
							echo "$f" >> "$pruneDir/$PRUNE_HISTORY_FILENAME"

							similarCount=$(( $similarCount + 1 ))
							verbose "Add image '$f' to prune directory '$pruneDir'."
						else
							debug "'$previousImage' seems different to '$f' ($difference)."
							
							if [[ $stillSimilar > 0 ]]; then 
								similarCount=$(( $similarCount + 1 ))
								mv "$pruneDir" "$pruneDir ($similarCount)"
								pruneCount=$(( $pruneCount + 1 )); 
							fi
							stillSimilar=0
							similarCount=0
						fi
					else
						debug "Compare return error '$difference'. Not a comparable value."	
					fi
				fi

				previousImage=$f
			fi
		fi
	done	
else
	verbose "Start to commit prune selections."

	find "$SOURCE" -type f -name "$PRUNE_HISTORY_FILENAME" -print0 | sort -z | while IFS= read -r -d '' f; do
		pruneDir=$(dirname "${f}")
		debug "Reading prune file file '$f' to find deleted files."
		
		while read p; do
			debug "p = $p"
			filenameWithExt=$(basename "$p")
			linked="$pruneDir/$filenameWithExt"
			debug "Check if link '$linked' still exists."
			if [[ ! -f "$linked" ]]; then
				debug "'$linked' has been deleted, so delete the original file '$p'."
				rm -f "$p"
				verbose "'$p' has been pruned (deleted)."
			fi
		done <"$f"
		debug "Prune of '$pruneDir' finished, delete it."
		rm -Rf "$pruneDir"	done
	done

	if [[ ! $KEEP ]]; then
		debug "Prune of '$SOURCE' finished, delete it."
		rmdir "$SOURCE"
	fi
fi