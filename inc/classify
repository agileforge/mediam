#!/bin/bash

# *************************************************************************************************
# mediam (Media Maid)
# https://github.com/crabouif/mediam
# *************************************************************************************************
# License: GPL 3
# Author: Pascal Fluck (PFComputing)
# *************************************************************************************************

display_classify_usage() { 
	echo -e "Provide facilities to classify multimedia files as pictures or video taken by a camera.\n" 
	echo -e "Usage:" 
	echo -e "$0 classify -R -H <HIERARCHY> -a <ACTION> -v -d -h [source] [target]\n" 
	echo -e "Arguments:" 
	echo -e "-R  --recursive                   Execute action(s) recursively."
	echo -e "-H  --hierarchy=HIERARCHY         Classify the images according the specified HIERARCHY."
	echo -e "-a  --action=ACTION               Action type. Could be 'copy', 'move' or 'link'."
	echo -e "-v  --verbose                     Display details while executing actions."
	echo -e "-d  --debug                       Display more details while executing actions."
	echo -e "-h  --help                        Display this help and exit."
	echo -e "\n" 
	echo -e "HIERARCHY" 
	echo -e "Hrearchy of classification. Possible to specifiy several formats or levels."
	echo -e "If separated by slash (/) then generate folders."
	echo -e "Ex: year-month/type => create directories for each years-month, and then inside a directory for each type."
	echo -e "    > 2010-12/image"
	echo -e "    > 2011-01/video"
	echo -e "Possible values are:"
	echo -e "    year: create a directory for each years of media."
	echo -e "    month: create a directory for each months of media." 
	echo -e "    day: create a directory for each days of media." 
	echo -e "    media: create a directory for each type of media (image or video)" 
	echo -e "    country: create a directory for each country. Try to get it from google services according GPS coordinate in EXIF." 
	echo -e "    state: create a directory for each country. Try to get it from google services according GPS coordinate in EXIF." 
	echo -e "    city: create a directory for each city. Try to get it from google services according GPS coordinate in EXIF."
	echo -e "    type: create a directory for each type of media (video or image)." 
	echo -e "\n" 
	echo -e "ACTION" 
	echo -e "Action to do while classifying. Default is 'copy'."
	echo -e "    copy: make a copy of media in new classification structure."
	echo -e "    move: move the file in new classification structure." 
	echo -e "    link: create a symbolic link of media in the new classification structure." 
	echo -e "\n" 
} 

# Initialization
GEO_API_URL="http://maps.googleapis.com/maps/api/geocode/json?latlng=__coordinates__&sensor=false"
ACTION="copy"
MAXDEPTH=1

# Parse parameters
OPTS=$( getopt -o a:H:vdRh -l action:,hierarchy:,verbose,debug,recursive,help -- $BASE_OPTS )
if [ $? != 0 ] ; then 
	echo "Failed parsing options." >&2 
	exit 1 
fi

if [[ "$OPTS" == " -- 'classify'" ]]; then
	display_classify_usage
	exit 1
fi

eval set -- "$OPTS"

while true; do
	case "$1" in
	    -H | --hierarchy )
			shift
	        HIERARCHY=${1%/}
			shift
	        ;;
	    -a | --action )
			shift
	        ACTION="$1"
			shift
	        ;;
        -R | --recursive )           
			shift
			RECURSIVE=true
			RECURSIVE_OPT=-r
			MAXDEPTH=999
            ;;
		-h | --help )
			display_classify_usage
			break
			;;
		-- ) 
			shift
			break 
			;;
		* )
			shift
			;;
	esac
done

debug "ACTION = $ACTION"
debug "HIERARCHY = $HIERARCHY"

# Some checks
re="^(copy|move|link)$"
if [[ ! $ACTION =~ $re ]]; then
	echo -e "Argument --action must be 'copy', 'move' or 'link'.\n"
	display_classify_usage
	exit 1
fi

re="^((year|month|day|hour|minute|second|country|state|city|type).*)+$"
if [[ ! $HIERARCHY =~ $re ]]; then
	debug "'$HIERARCHY' not match to $re"
	echo -e "The hierarchy of argument --classify contains a not recognised element.\n"
	display_classify_usage
	exit 1
fi

# Execute classify command
verbose "Launch cassification witn '$HIERARCHY'."
find "$SOURCE" -maxdepth $MAXDEPTH -type f -print0 | while IFS= read -r -d '' f; do
	debug "$f"
	if [[ -f $f ]];	then
		debug "$f"
		filenameWithExt=$(basename "$f")
		filename=${filenameWithExt%.*}
		debug "filenameWithExt=$filenameWithExt"
		debug "filename=$filename"

		re="^([12][0-9]{3})([01][0-9])([0-3][0-9])_([0-2][0-9])([0-5][0-9])([0-5][0-9])$"
		if [[ $filename =~ $re ]]; then
			year=${BASH_REMATCH[1]} && debug "year = $year"
			month=${BASH_REMATCH[2]} && debug "month = $month"
			day=${BASH_REMATCH[3]} && debug "day = $day"
			hour=${BASH_REMATCH[4]} && debug "hour = $hour"
			minute=${BASH_REMATCH[5]} && debug "minute = $minute"
			second=${BASH_REMATCH[6]} && debug "second = $second"

			newpath=${HIERARCHY/year/$year}
			newpath=${newpath/month/$month}
			newpath=${newpath/day/$day}
			newpath=${newpath/hour/$hour}
			newpath=${newpath/minute/$minute}
			newpath=${newpath/second/$second}

			# Make geo informations
			country=""
			state=""
			city=""
			re="^.*(country|state|city).*$"
			if [[ $HIERARCHY =~ $re ]]; then
				debug "Search for coordinates."
				coordinates=$(exiftool -m -n -p '$GPSLatitude,$GPSLongitude' "$f")
				debug "coordinates = $coordinates"
				re="^[0-9]+\.[0-9]+,[0-9]+\.[0-9]+$"
				if [[ $coordinates =~ $re ]]; then
					debug "Reverse coordinates using google."
					finalUrl=${GEO_API_URL/__coordinates__/$coordinates}
					debug "finalUrl=$finalUrl"
					json=$(curl -s $finalUrl)
					debug "json=$json"
					country=$(echo $json | jq -r '.results[].address_components[0] | select( .types | contains(["country","political"]) ) .long_name')
					debug "country = $country"
					state=$(echo $json | jq -r '.results[].address_components[0] | select( .types | contains(["administrative_area_level_1","political"]) ) .long_name')
					debug "state = $state"
					city=$(echo $json | jq -r '.results[].address_components[0] | select( .types | contains(["locality","political"]) ) .long_name')
					debug "city = $city"
				fi
				if [[ "$country" == "" ]]; then country="Unknown country"; fi
				if [[ "$state" == "" ]]; then state="Unknown state"; fi
				if [[ "$city" == "" ]]; then city="Unknown city"; fi
				newpath=${newpath/country/$country}
				newpath=${newpath/state/$state}
				newpath=${newpath/city/$city}
			fi

			# Make file type
			re="^.*(type).*$"
			if [[ $HIERARCHY =~ $re ]]; then
				typeof "$f"
				mediaType=$__result__
				if [[ "$mediaType" == "" ]]; then country="Unknown type"; fi
				newpath=${newpath/type/$mediaType}
			fi

			# Finally do the action
			newpath="$TARGET/$newpath"
			debug "newpath = $newpath"

			mkdir -p "$newpath"

			target_file="$newpath/$filenameWithExt"
			debug "target_file=$target_file"

			action $ACTION "$f" "$target_file"
		else
			debug "filename '$filename' not match regex '$re'"
		fi
	fi
done
