#!/bin/bash

# *************************************************************************************************
# simphorg name comes from Simple Media Organization.
#
# Script bash to allow to rename and classify multimedia files.
#
# *************************************************************************************************
# License: GPL
# Author: Pascal Fluck (PFComputing)
# *************************************************************************************************

display_usage() { 
	echo -e "Provide facilities to classify multimedia files as pictures or video taken by a camera. \n" 
	echo -e "Usage:\n$0 -h -R -r -c <HIERARCHY> -a <ACTION> [source] [target]\n" 
	echo -e "Arguments:" 
	echo -e "-r  --rename                Rename files with the date taken using format yyMMdd_hhmmss." 
	echo -e "-R  --recursive             Execute action(s) recursively."
	echo -e "-c  --classify=HIERARCHY    Classify the images according the specified TYPE."
	echo -e "-a  --action=ACTION         Action type. Could be 'copy', 'move' or 'link'."
	echo -e "-v  --verbose               Display details while executing actions."
	echo -e "-d  --debug                 Display more details while executing actions."
	echo -e "-h  --help                  Display this help and exit."
	echo -e "\n" 
	echo -e "HIERARCHY" 
	echo -e "Hrearchy of classification. Possible to specifiy several levels, slash (/) separated."
	echo -e "Ex: year,month => create directories for each years, and then inside a directory for each months."
	echo -e "    year: create a directory for each years of media."
	echo -e "    month: create a directory for each months of media." 
	echo -e "    day: create a directory for each days of media." 
	echo -e "    media: create a directory for each type of media (image or video)" 
	echo -e "    country: create a directory for each country. Try to get it from google services according GPS coordinate in EXIF." 
	echo -e "\n" 
	echo -e "ACTION" 
	echo -e "Action to do while classifying. Default is 'copy'."
	echo -e "    copy: make a copy of media in new classification structure."
	echo -e "    move: move the file in new classification structure." 
	echo -e "    link: create a symbolic link of media in the new classification structure." 
} 

debug() {
	if [[ $DEBUG == 1 ]]; 
	then 
		echo "[DEBUG] $1" 
	fi	
}

# if less than two arguments supplied, display usage 
if [[  $# -le 1 ]];
then 
	display_usage
	exit 1
fi 
 
# check whether user had supplied -h or --help . If yes display usage 
if [[ ( $# == "--help") ||  $# == "-h" ]] 
then 
	display_usage
	exit 0
fi 

# Initialize base and default values
EXIFTOOL_BIN="/usr/bin/exiftool"
ACTION="copy"

# Parse parameters
while [ "$1" != "" ]; do
	case $1 in
        -r | --rename )          
			RENAME=1
            ;;
	    -c | --classify )
	        shift
	        CLASSIFY=1
	        HIERARCHY="$1"
	        ;;
	    -c=* | --classify=* )
	        CLASSIFY=1
	        HIERARCHY="${key#*=}"
	        ;;
	    -a | --action )
	        shift
	        ACTION="$1"
	        ;;
	    -a=* | --action=* )
	        ACTION="${key#*=}"
	        ;;
        -v | --verbose )
			EXIFTOOL_VERBOSE=-v
			;;
        -d | --debug )
			DEBUG=1
			;;
        -R | --recursive )           
			RECURSIVE="-r"
            ;;
        * )            
			SOURCE=${1%/}
    		shift
			TARGET=${1%/}
			;;
	esac
    shift
done

if [[ "$TARGET" == "" ]];
then
	TARGET=$SOURCE
fi

debug "RENAME = $RENAME"
debug "CLASSIFY = $CLASSIFY"
debug "HIERARCHY = $HIERARCHY"
debug "ACTION = $ACTION"
debug "EXIFTOOL_VERBOSE = $EXIFTOOL_VERBOSE"
debug "RECURSIVE = $RECURSIVE"
debug "SOURCE = $SOURCE"
debug "TARGET = $TARGET"

# Some checks
re="^(copy|move|link)$"
if [[ ! $ACTION =~ $re ]]; 
then
	echo -e "Argument --action must be 'copy', 'move' or 'link'.\n"
	display_usage
	exit 1
fi

# Execute rename command
if [[ $RENAME == 1 ]];
then
	$EXIFTOOL_BIN '-filename<CreateDate' -d %Y%m%d_%H%M%S%%-c.%%le $RECURSIVE $EXIFTOOL_VERBOSE $SOURCE
fi

# Execute classify command
if [[ $CLASSIFY == 1 ]];
then
	for f in $SOURCE/* $SOURCE/**/* ; do
		if [[ -f $f ]];
		then
			filename=$(basename "$f")
			filename=${filename%.*}
			debug "filename=$filename"

			re="^([12][0-9]{3})([01][0-9])([0-3][0-9])_([0-2][0-9])([0-5][0-9])([0-5][0-9])$"
			if [[ $filename =~ $re ]];
			then
				year=${BASH_REMATCH[1]} && debug "year = $year"
				month=${BASH_REMATCH[2]} && debug "month = $month"
				day=${BASH_REMATCH[3]} && debug "day = $day"
				hour=${BASH_REMATCH[4]} && debug "hour = $hour"
				minute=${BASH_REMATCH[5]} && debug "minute = $minute"
				second=${BASH_REMATCH[6]} && debug "second = $second"

				target_file="$TARGET"
			else
				debug "filename '$filename' not match regex '$re'"
			fi
		fi
	done;
fi
